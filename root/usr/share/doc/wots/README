#==============================================================================
#
# USING WOTS
#
# typical usage:
#
# ./wots.pl --config=/path/to/wotsrc/file
#
# Further sections in this README:
# COMMAND LINE OPTIONS
# GENERAL CONFIGURATION PARAMETERS
# FILES SEARCHED
# ACTIONS TO A FOUND PATTERN
# BEHAVIOR CHANGING
#
#==============================================================================
#
# COMMAND LINE OPTIONS
#
# config ==> specifies the location of the config file, this one you'll need
# debug (See section "GENERAL CONFIGURATION PARAMETERS")
# version (See section "GENERAL CONFIGURATION PARAMETERS")
# daemon (See section "GENERAL CONFIGURATION PARAMETERS")
# include_old_lines	Normally, wots starts at the end of the monitored files
# 			and checks only new lines, with this option it will
# 			include the original lines once as well
# 			This option is only available from the commandline
# 			Values: on|off
# 			Default: off
#
# More options are possible, but it is safer to specify as much as possible
# in the config file, where you have more options as well
#
#==============================================================================
# GENERAL CONFIGURATION PARAMETERS
#
# change the value by using "config <PARAMNAME> <VALUE>"
# in the config file
# all possible parameters are: 
#
# daemon 	on|off: wether to fork and run as a daemon
# 		default: off
# 		Don't use this if running wots via systemd
#
# lsprog  	path to "ls", especially needed on windows
# 		defaults to just "ls"
#
# syslogfacility	facility used when sending something to syslog
# 			default: user
#
# syslogpriority	priority used when sending something to syslog
# 			default: info
#
# debug 	"on" or "off"
# 		default: off
#
# poll		the number of seconds to sleep before rechecking
# 		the monitored files, default: 5
#
# count		max number of checks to perform before stopping
# 		0 means no limit, default: 0
# 		Set this to something like 6000 when using systemd, the
# 		systemd service will then restart after count*poll seconds
# 		(useful to prevent possible mem leaks)
#
# restartinterval	after how many passes (see poll param) you want
# 			to restart the program to prevent memory leaks
# 			0 means no restarting, default: 0
# 			minimum: 1000
# 			This parameter won't work correctly with systemd,
# 			so there set the count parameter (and systemd will
# 			restart the service upon exit)
#
# logisaliveinterval	after how many passes (see poll param) you want
# 			to log a message to the isalivelog, if defined
# 			default: 3000 passes
#
# isalivelog 	path to a file where wots logs a message every
# 		<logisaliveinterval> passes to show it is still alive
# 		By default this is emtpy and thus not used
# 		If you use this, you can use wots itself to monitor this
# 		and send an action to nagios, zabbix, ...
#		Example:
# 		from /tmp/wots.log
#		 /./ sendnsca=~nagios||~host||Logfiles check active||~ok||Wots is working OK
# 		
# mailmethod	smtp or sendmail, default smtp
# mailserver	if mailmethod is smtp, mention the name or IP of the nameserver
# 		by default, this is localhost
#
# close_and_reopen	on unix systems, it doesn't matter if a file is open
# 			when rotating, but on windows this locks the file
# 			So by default this is "off" on *nix systems and
# 			"on" on windows
# nscapassword	The password for sending nsca alerts to a nagios-like server
# nscaport	The nsca port on the nagios server
#==============================================================================
#
# CUSTOM VARIABLES
#
# The config file can also contain custom variables that you can use on
# actions. Some examples when you want to predefine some nagios services to
# send your alerts to:
#
# variable service Logfiles
# variable servicenn Not escalating logfiles
# variable nagios <NAGIOSSERVER>
# variable ok 0
# variable warning 1
# variable error 2
#
# Variables can be used in the actions by preceding them with '~'
# Example:
# from /tmp/wots.log
# /./ sendnsca=~nagios||~host||Logfiles check active||~ok||Wots is working OK
#==============================================================================
#
# SPECIAL VARIABLES
#
# There are 3 predefined variables you can also use in the actions:
# ~L		Returns the filename of the file mathing the line
# ~M		Returns the full matching line content
# ~FQDN		Returns the fqdn of the host
#
#==============================================================================
#
# FILES SEARCHED
#
# The files you want searched can have wildcards and even expressions, eg:
#
# from /var/log/`date +%Y%m%d`.audit
# from /opt/websphere/*/SystemErr.log
# from c:\nagios\wots.log
# 
# For each mentioned from line, you need to specify the patterns (perl regex)
# you want to search for, and the actions taken when found
# See the file wotsrc.sample for some examples
#
#==============================================================================
#
# ACTIONS TO A FOUND PATTERN
#
# a found pattern needs an action, possible actions are:
# syslog
# mail
# exec
# exec_oncepermatch
# sendnsca
# sendnsca_oncepermatch
# ignore
# See the file wotsrc.sample for example usages of these
#
#==============================================================================
#
# BEHAVIOR CHANGING
#
# Normally, when a pattern is found, the action wanted is executed and the line
# is not looked at again, so patterns further down are not matched
# This behavior can be changed by adding a option before the action parameter
# Possible options are:
#
# ignore	If a line matches the pattern, ignore it and continue with
# 		the next line
# continue	If a line matches the pattern, do the action and continue with
#		further pattern mathing on this line
# ignore_rest_file	If the line matches the pattern, execute the action
#			but stop parsing the rest of the file afterwards
#
# See the file wotsrc.sample for example usages of these
#
#==============================================================================
